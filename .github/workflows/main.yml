name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          rm -f package-lock.json
          npm install --legacy-peer-deps

      - name: Run Tests
        run: npm test

      - name: Build Frontend
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        run: |
          rm -f package-lock.json
          npm install --legacy-peer-deps

      - name: Run Tests
        run: npm test

      - name: Build Backend
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist

  docker:
    name: Build & Push Docker Images
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Download Backend Build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/todo-app-frontend:latest

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/todo-app-backend:latest

  notify:
    name: Notification
    needs: [docker]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check Build Status
        if: ${{ needs.docker.result != 'success' }}
        run: exit 1