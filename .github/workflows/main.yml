name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  DOCKER_FRONTEND_IMAGE: edenpolovets/todo-app-frontend
  DOCKER_BACKEND_IMAGE: edenpolovets/todo-app-backend

jobs:
  build-and-test-frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

      - name: Run Unit Tests
        run: npm run test

      - name: Run Integration Tests
        run: npm run test:integration

      - name: Build Frontend
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 5

  build-and-test-backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

      - name: Run Tests
        run: npm test

      - name: Build Backend
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist
          retention-days: 5

  docker-build-and-push:
    name: Build & Push Docker Images
    needs: [build-and-test-frontend, build-and-test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_FRONTEND_IMAGE }}:latest
            ${{ env.DOCKER_FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_FRONTEND_IMAGE }}:latest
          cache-to: type=inline
          platforms: linux/amd64,linux/arm64

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_BACKEND_IMAGE }}:latest
            ${{ env.DOCKER_BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_BACKEND_IMAGE }}:latest
          cache-to: type=inline
          platforms: linux/amd64,linux/arm64

  notify:
    name: Notification
    needs: [docker-build-and-push]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check Build Status
        if: ${{ needs.docker-build-and-push.result != 'success' }}
        run: exit 1 