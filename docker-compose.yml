services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://ec2-13-218-172-249.compute-1.amazonaws.com:4000/api
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/todo_app
      - JWT_SECRET=NCI-2025
      - NODE_ENV=production
      - FRONTEND_URL=http://ec2-13-218-172-249.compute-1.amazonaws.com:8080
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: todo_app
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    name: todo_app_postgres_data
    driver: local 